// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kessel/inventory/v1/health.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KesselInventoryHealthService_GetLivez_FullMethodName  = "/kessel.inventory.v1.KesselInventoryHealthService/GetLivez"
	KesselInventoryHealthService_GetReadyz_FullMethodName = "/kessel.inventory.v1.KesselInventoryHealthService/GetReadyz"
)

// KesselInventoryHealthServiceClient is the client API for KesselInventoryHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KesselInventoryHealthServiceClient interface {
	GetLivez(ctx context.Context, in *GetLivezRequest, opts ...grpc.CallOption) (*GetLivezResponse, error)
	GetReadyz(ctx context.Context, in *GetReadyzRequest, opts ...grpc.CallOption) (*GetReadyzResponse, error)
}

type kesselInventoryHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKesselInventoryHealthServiceClient(cc grpc.ClientConnInterface) KesselInventoryHealthServiceClient {
	return &kesselInventoryHealthServiceClient{cc}
}

func (c *kesselInventoryHealthServiceClient) GetLivez(ctx context.Context, in *GetLivezRequest, opts ...grpc.CallOption) (*GetLivezResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLivezResponse)
	err := c.cc.Invoke(ctx, KesselInventoryHealthService_GetLivez_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselInventoryHealthServiceClient) GetReadyz(ctx context.Context, in *GetReadyzRequest, opts ...grpc.CallOption) (*GetReadyzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadyzResponse)
	err := c.cc.Invoke(ctx, KesselInventoryHealthService_GetReadyz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KesselInventoryHealthServiceServer is the server API for KesselInventoryHealthService service.
// All implementations must embed UnimplementedKesselInventoryHealthServiceServer
// for forward compatibility.
type KesselInventoryHealthServiceServer interface {
	GetLivez(context.Context, *GetLivezRequest) (*GetLivezResponse, error)
	GetReadyz(context.Context, *GetReadyzRequest) (*GetReadyzResponse, error)
	mustEmbedUnimplementedKesselInventoryHealthServiceServer()
}

// UnimplementedKesselInventoryHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKesselInventoryHealthServiceServer struct{}

func (UnimplementedKesselInventoryHealthServiceServer) GetLivez(context.Context, *GetLivezRequest) (*GetLivezResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLivez not implemented")
}
func (UnimplementedKesselInventoryHealthServiceServer) GetReadyz(context.Context, *GetReadyzRequest) (*GetReadyzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadyz not implemented")
}
func (UnimplementedKesselInventoryHealthServiceServer) mustEmbedUnimplementedKesselInventoryHealthServiceServer() {
}
func (UnimplementedKesselInventoryHealthServiceServer) testEmbeddedByValue() {}

// UnsafeKesselInventoryHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KesselInventoryHealthServiceServer will
// result in compilation errors.
type UnsafeKesselInventoryHealthServiceServer interface {
	mustEmbedUnimplementedKesselInventoryHealthServiceServer()
}

func RegisterKesselInventoryHealthServiceServer(s grpc.ServiceRegistrar, srv KesselInventoryHealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedKesselInventoryHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KesselInventoryHealthService_ServiceDesc, srv)
}

func _KesselInventoryHealthService_GetLivez_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLivezRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselInventoryHealthServiceServer).GetLivez(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselInventoryHealthService_GetLivez_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselInventoryHealthServiceServer).GetLivez(ctx, req.(*GetLivezRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselInventoryHealthService_GetReadyz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadyzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselInventoryHealthServiceServer).GetReadyz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselInventoryHealthService_GetReadyz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselInventoryHealthServiceServer).GetReadyz(ctx, req.(*GetReadyzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KesselInventoryHealthService_ServiceDesc is the grpc.ServiceDesc for KesselInventoryHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KesselInventoryHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kessel.inventory.v1.KesselInventoryHealthService",
	HandlerType: (*KesselInventoryHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLivez",
			Handler:    _KesselInventoryHealthService_GetLivez_Handler,
		},
		{
			MethodName: "GetReadyz",
			Handler:    _KesselInventoryHealthService_GetReadyz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kessel/inventory/v1/health.proto",
}
